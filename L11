import tkinter as tk
from tkinter import messagebox, simpledialog
class TicTacToe:
    def __init__(self, root, rows, cols):
        self.root = root
        self.root.title("Tic Tac Toe")
        self.current_player = "X"
        self.rows = rows
        self.cols = cols
        self.buttons = [[None for _ in range(cols)] for _ in range(rows)]
        self.create_widgets()
    
    def create_widgets(self):
        for row in range(self.rows):
            for col in range(self.cols):
                button = tk.Button(self.root, text="", font=('normal', 40), width=5, height=2,
                                   command=lambda r=row, c=col: self.on_button_click(r, c))
                button.grid(row=row, column=col)
                self.buttons[row][col] = button
    def on_button_click(self, row, col):
        if self.buttons[row][col]['text'] == "" and not self.check_winner():
            self.buttons[row][col]['text'] = self.current_player
            if self.check_winner():
                messagebox.showinfo("Game Over", f"Player {self.current_player} wins!")
                self.reset_game()
            elif self.is_board_full():
                messagebox.showinfo("Game Over", "It's a tie!")
                self.reset_game()
            else:
                self.current_player = "O" if self.current_player == "X" else "X"
    def check_winner(self):
        # Check rows
        for row in range(self.rows):
            if all(self.buttons[row][col]['text'] == self.current_player for col in range(self.cols)):
                return True
        # Check columns
        for col in range(self.cols):
            if all(self.buttons[row][col]['text'] == self.current_player for row in range(self.rows)):
                return True
        # Check diagonals (only if the grid is square)
        if self.rows == self.cols:
            if all(self.buttons[i][i]['text'] == self.current_player for i in range(self.rows)):
                return True
            if all(self.buttons[i][self.rows - 1 - i]['text'] == self.current_player for i in range(self.rows)):
                return True
        return False
    def is_board_full(self):
        return all(self.buttons[row][col]['text'] != "" for row in range(self.rows) for col in range(self.cols))
    def reset_game(self):
        for row in range(self.rows):
            for col in range(self.cols):
                self.buttons[row][col]['text'] = ""
        self.current_player = "X"
def get_grid_size():
    root = tk.Tk()
    root.withdraw()  # Hide the root window
    rows = simpledialog.askinteger("Input", "Enter number of rows:", minvalue=3, maxvalue=10)
    cols = simpledialog.askinteger("Input", "Enter number of columns:", minvalue=3, maxvalue=10)
    root.destroy()
    return rows, cols
if __name__ == "__main__":
    rows, cols = get_grid_size()
    root = tk.Tk()
    game = TicTacToe(root, rows, cols)
    root.mainloop()
